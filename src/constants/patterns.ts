import { AppState } from '../store';
import { LeavesPath, Paths } from '../types';

type Patterns = typeof patterns;

const patterns = {
  spaceships: {
    glider: [
      [true, false, true],
      [false, true, true],
      [false, true, false],
    ],
    LightWeight: [
      [false, false, false, false, false],
      [false, false, true, true, false],
      [true, true, false, true, true],
      [true, true, true, true, false],
      [false, true, true, false, false],
    ],
    MiddleWeight: [
      [false, false, false, false, false, false],
      [false, true, true, true, true, true],
      [true, false, false, false, false, true],
      [false, false, false, false, false, true],
      [true, false, false, false, true, false],
      [false, false, true, false, false, true],
    ],
    HeavyWeight: [
      [false, false, false, false, false, false, false],
      [false, false, false, false, false, false, false],
      [false, true, true, true, true, true, true],
      [true, false, false, false, false, false, true],
      [false, false, false, false, false, false, true],
      [true, false, false, false, false, true, false],
      [false, false, true, true, false, false, false],
    ],
  },
  oscillators: {
    blinker: [
      [false, true, false],
      [false, true, false],
      [false, true, false],
    ],
    toad: [
      [false, true, true, true],
      [true, true, true, false],
    ],
    beacon: [
      [true, true, false, false],
      [true, true, false, false],
      [false, false, true, true],
      [false, false, true, true],
    ],
    pulsar: [
      [
        false,
        false,
        true,
        true,
        true,
        false,
        false,
        false,
        true,
        true,
        true,
        false,
        false,
      ],
      [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
      ],
      [
        true,
        false,
        false,
        false,
        false,
        true,
        false,
        true,
        false,
        false,
        false,
        false,
        true,
      ],
      [
        true,
        false,
        false,
        false,
        false,
        true,
        false,
        true,
        false,
        false,
        false,
        false,
        true,
      ],
      [
        true,
        false,
        false,
        false,
        false,
        true,
        false,
        true,
        false,
        false,
        false,
        false,
        true,
      ],
      [
        false,
        false,
        true,
        true,
        true,
        false,
        false,
        false,
        true,
        true,
        true,
        false,
        false,
      ],
      [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
      ],
      [
        false,
        false,
        true,
        true,
        true,
        false,
        false,
        false,
        true,
        true,
        true,
        false,
        false,
      ],
      [
        true,
        false,
        false,
        false,
        false,
        true,
        false,
        true,
        false,
        false,
        false,
        false,
        true,
      ],
      [
        true,
        false,
        false,
        false,
        false,
        true,
        false,
        true,
        false,
        false,
        false,
        false,
        true,
      ],
      [
        true,
        false,
        false,
        false,
        false,
        true,
        false,
        true,
        false,
        false,
        false,
        false,
        true,
      ],
      [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
      ],
      [
        false,
        false,
        true,
        true,
        true,
        false,
        false,
        false,
        true,
        true,
        true,
        false,
        false,
      ],
    ],
    pentaDecathlon: [
      [false, false, false, false, false, false, false],
      [false, false, false, false, false, false, false],
      [false, false, false, false, false, false, false],
      [false, false, false, false, false, false, false],
      [false, false, false, false, false, true, false],
      [false, false, false, false, false, true, false],
      [false, false, false, false, true, false, true],
      [false, false, false, false, false, true, false],
      [false, false, false, false, false, true, false],
      [false, false, false, false, false, true, false],
      [false, false, false, false, false, true, false],
      [false, false, false, false, true, false, true],
      [false, false, false, false, false, true, false],
      [false, false, false, false, false, true, false],
    ],
  },
  still: {
    block: [
      [true, true],
      [true, true],
    ],
    beeHive: [
      [false, true, true, false],
      [true, false, false, true],
      [false, true, true, false],
    ],
    loaf: [
      [false, true, true, false],
      [true, false, false, true],
      [false, true, false, true],
      [false, false, true, false],
    ],
    boat: [
      [true, true, false],
      [true, false, true],
      [false, true, false],
    ],
    tub: [
      [false, true, false],
      [true, false, true],
      [false, true, false],
    ],
  },
} as const;

export const getPattern = (type: LeavesPath<Patterns, 1>) =>
  type
    .split('.')
    .reduce((obj: any, key: string) => obj[key], patterns) as AppState['world'];
